1. Не все компоненты реализуют Update и не всем компонентам нужна логика.
	На данный момент, компоненты, которые не реализуют Update, реализуют Render. В случае реализации описанного алгоритма ("на уровне IGameState орагнизовать массивы компонентов"), то что было реализовано в Render, перейдет в Update.
	Единственный компонент который не реализует Update это TransformComponent. Параметры этого компонента можно сделать свойствами GameObject и не реализовывать как компонент, так как этот компонент добавляется ко всем создающимся объектам.
	Можно конечно не наследовать компоненты от одного интерфейса, а разделить их по функционалу и сделать их свойствами класса GameObject. Например разделить следующим образом - IRander, IControl, IAI, IPhysics и т.п. И у каждого отсавить только то что необходимо для этого компонента.

2. Мы заранее знаем, что хотим переключиться на определенный Renderer. Можно ли это сделать без дополнительных проверок во время update (if, сортировка и т.п.)?
	Думаю можно реализовать с использованием delegate. Приложу общую идею описанную с помощью кода(см. рис.), чтобы было понятнее. Создаем объекты делегата для разных методов рендера. И ставим по умолчанию текущий метод. Во время переключения способа мы будем меняять ссылку на актуальный метод рендера. В этом случа не нужно будет делать проверку, сортировку или еще что-то в методах Update.

5. Почему тогда SandboxGameState, GameClock или ColiderDetector не static?
	У нас может быть несколько экземпляров GameClock. Если бы он был static, мы бы не смогли создать их. Аналогично с SandboxGameState, он описывает уровень игры, и мы можем захотеть создать еще инстансов этого уровня. ColiderDetector в данной реализации да, можно сделать статичным, так как все объекты используют один и тот же алгоритм проверки столкновений и существование двух разных объектов ColiderDetector не требуется.